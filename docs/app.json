[{"name": "app.py", "content": "from shiny.express import render, input\nfrom shiny import ui, reactive\nimport data.load\nfrom logic.season import Season\n\nui.input_dark_mode()\n\nui.tags.link(\n    rel=\"stylesheet\", href=\"https://fonts.googleapis.com/css2?family=Newsreader\"\n)\n\nui.tags.style(\"body { font-family: 'Newsreader'}\")\n\nui.panel_title(\"Imaginarium Theater\")\n\nui.input_select(\n    id=\"selected_season\",\n    label=\"\",\n    choices=data.load.season_labels(),\n    width=\"170px\",\n)\n\n\n@reactive.calc\ndef selected_season():\n    return Season(input.selected_season())\n\n\nui.p()\nui.panel_title(\"Alternate Cast Elements\")\n\n\n@render.text\ndef selected_season_alt_cast_elements():\n    return str(selected_season().alt_cast_elements)\n\n\nui.p()\nui.panel_title(\"Opening Characters\")\n\n\n@render.text\ndef selected_season_op_characters():\n    return str(selected_season().op_characters)\n\n\nui.p()\nui.panel_title(\"Special Invitations\")\n\n\n@render.text\ndef selected_season_special_invites():\n    return str(selected_season().special_invites)\n", "type": "text"}, {"name": "logic\\__init__.py", "content": "", "type": "text"}, {"name": "logic\\season.py", "content": "from datetime import datetime\nimport data.load\nimport pandas as pd\n\n\nclass Season:\n    def __init__(self, date_label: str):\n        self.date = datetime.strptime(date_label, \"%B %Y\").date()\n        date_num = datetime.strftime(self.date, \"%Y%m\")\n        seasons = data.load.seasons()\n        selected_season = seasons[seasons[\"date\"] == date_num].melt(\n            id_vars=[\"date\"], var_name=\"field\"\n        )\n        self.alt_cast_elements = Season._pull_alt_cast_elements_from(selected_season)\n        self.special_invites = Season._pull_special_invites_from(selected_season)\n        self.op_characters = Season._pull_op_characters_from(selected_season)\n\n    def _pull_alt_cast_elements_from(df: pd.DataFrame):\n        return Season._df_field_to_list(df, \"alt_cast_element\")\n\n    def _pull_special_invites_from(df: pd.DataFrame):\n        return Season._df_field_to_list(df, \"special_invite\")\n\n    def _pull_op_characters_from(df: pd.DataFrame):\n        return Season._df_field_to_list(df, \"op_character\")\n\n    def _df_field_to_list(df: pd.DataFrame, field_name: str):\n        return df[df[\"field\"].str.contains(field_name)][\"value\"].tolist()\n\n    def count_elig_characters_in(self, character_inventory: list[str]):\n        return len(self.get_elig_characters_in(character_inventory))\n\n    def get_elig_characters_in(self, character_inventory: list[str]):\n        character_inventory += [\n            c for c in self.op_characters if c not in character_inventory\n        ]\n\n        characters = data.load.characters()\n        available_characters = characters[\n            characters[\"character\"].isin(character_inventory)\n        ]\n\n        eligible_characters = available_characters[\n            available_characters[\"element\"].isin(self.alt_cast_elements)\n            | available_characters[\"character\"].isin(self.special_invites)\n        ][\"character\"].tolist()\n\n        if \"Traveler\" in character_inventory:\n            eligible_characters += [\"Traveler\"]\n\n        return eligible_characters\n", "type": "text"}, {"name": "tests\\__init__.py", "content": "", "type": "text"}, {"name": "tests\\test_season.py", "content": "from logic.season import Season\nfrom datetime import datetime\n\n\ndef test_init():\n    test_season = Season(\"February 2025\")\n\n    assert test_season.date == datetime(2025, 2, 1).date()\n\n    expected_alt_cast_elements = [\"Pyro\", \"Hydro\", \"Anemo\"]\n\n    assert test_season.alt_cast_elements == expected_alt_cast_elements\n\n    expected_op_characters = [\n        \"Hu Tao\",\n        \"Gaming\",\n        \"Mona\",\n        \"Xingqiu\",\n        \"Venti\",\n        \"Shikanoin Heizou\",\n    ]\n\n    assert test_season.op_characters == expected_op_characters\n\n    expected_special_invites = [\"Keqing\", \"Ororon\", \"Citlali\", \"Yun Jin\"]\n\n    assert test_season.special_invites == expected_special_invites\n\n\ndef test_count_elig_characters():\n    test_season = Season(\"January 2025\")\n\n    test_character_inventory = []\n    assert test_season.count_elig_characters_in(test_character_inventory) == 6\n\n    test_character_inventory = test_season.op_characters\n    assert test_season.count_elig_characters_in(test_character_inventory) == 6\n\n    test_character_inventory = [\"Traveler\"]\n    assert test_season.count_elig_characters_in(test_character_inventory) == 7\n\n    test_character_inventory = test_season.special_invites\n    assert test_season.count_elig_characters_in(test_character_inventory) == 10\n\n    test_character_inventory = [\n        \"Xiangling\",\n        \"Jean\",\n        \"Diona\",\n        \"Kachina\",\n        \"Keqing\",\n        \"Tighnari\",\n        \"Barbara\",\n    ]\n    assert test_season.count_elig_characters_in(test_character_inventory) == 9\n", "type": "text"}, {"name": "data\\__init__.py", "content": "", "type": "text"}, {"name": "data\\characters.csv", "content": "character,element\nAlbedo,Geo\nAlhaitham,Dendro\nAloy,Cryo\nAmber,Pyro\nArataki Itto,Geo\nArlecchino,Pyro\nBaizhu,Dendro\nBarbara,Hydro\nBeidou,Electro\nBennett,Pyro\nCandace,Hydro\nCharlotte,Cryo\nChasca,Anemo\nChevreuse,Pyro\nChiori,Geo\nChongyun,Cryo\nCitlali,Cryo\nClorinde,Electro\nCollei,Dendro\nCyno,Electro\nDehya,Pyro\nDiluc,Pyro\nDiona,Cryo\nDori,Electro\nEmilie,Dendro\nEula,Cryo\nFaruzan,Anemo\nFischl,Electro\nFreminet,Cryo\nFurina,Hydro\nGaming,Pyro\nGanyu,Cryo\nGorou,Geo\nHu Tao,Pyro\nJean,Anemo\nKachina,Geo\nKaedehara Kazuha,Anemo\nKaeya,Cryo\nKamisato Ayaka,Cryo\nKamisato Ayato,Hydro\nKaveh,Dendro\nKeqing,Electro\nKinich,Dendro\nKirara,Dendro\nKlee,Pyro\nKujou Sara,Electro\nKuki Shinobu,Electro\nLayla,Cryo\nLan Yan,Anemo\nLisa,Electro\nLynette,Anemo\nLyney,Pyro\nMavuika,Pyro\nMika,Cryo\nMona,Hydro\nMualani,Hydro\nNahida,Dendro\nNavia,Geo\nNeuvillette,Hydro\nNilou,Hydro\nNingguang,Geo\nNoelle,Geo\nOroron,Electro\nQiqi,Cryo\nRaiden Shogun,Electro\nRazor,Electro\nRosaria,Cryo\nSangonomiya Kokomi,Hydro\nSayu,Anemo\nSethos,Electro\nShenhe,Cryo\nShikanoin Heizou,Anemo\nSigewinne,Hydro\nSucrose,Anemo\nTartaglia,Hydro\nThoma,Pyro\nTighnari,Dendro\nVenti,Anemo\nWanderer,Anemo\nWriothesley,Cryo\nXiangling,Pyro\nXianyun,Anemo\nXiao,Anemo\nXilonen,Geo\nXingqiu,Hydro\nXinyan,Pyro\nYae Miko,Electro\nYanfei,Pyro\nYaoyao,Dendro\nYelan,Hydro\nYoimiya,Pyro\nYun Jin,Geo\nZhongli,Geo\n", "type": "text"}, {"name": "data\\load.py", "content": "import pandas as pd\nfrom datetime import datetime\n\nDATA_DIR = \"data\"\n\n\ndef characters():\n    return pd.read_csv(f\"{DATA_DIR}/characters.csv\")\n\n\ndef character_names():\n    return characters()[\"character\"].tolist()\n\n\ndef elements():\n    return [\n        \"Anemo\",\n        \"Cryo\",\n        \"Dendro\",\n        \"Electro\",\n        \"Geo\",\n        \"Hydro\",\n        \"Pyro\",\n    ]\n\n\ndef seasons():\n    return pd.read_csv(f\"{DATA_DIR}/seasons.csv\", dtype=str)\n\n\ndef season_labels_and_dates():\n    dates = seasons()[\"date\"].tolist()\n    dates = [datetime.strptime(d, \"%Y%m\").date() for d in dates]\n    labels = [datetime.strftime(d, \"%B %Y\") for d in season_dates()]\n    return dict(zip(labels, dates))\n\n\ndef season_dates():\n    dates = seasons()[\"date\"].tolist()\n    return [datetime.strptime(d, \"%Y%m\").date() for d in dates]\n\n\ndef season_labels():\n    return [datetime.strftime(d, \"%B %Y\") for d in season_dates()]\n", "type": "text"}, {"name": "data\\seasons.csv", "content": "date,alt_cast_element_1,alt_cast_element_2,alt_cast_element_3,op_character_1,op_character_2,op_character_3,op_character_4,op_character_5,op_character_6,special_invite_1,special_invite_2,special_invite_3,special_invite_4\n202502,Pyro,Hydro,Anemo,Hu Tao,Gaming,Mona,Xingqiu,Venti,Shikanoin Heizou,Keqing,Ororon,Citlali,Yun Jin\n202501,Pyro,Cryo,Geo,Diluc,Bennett,Ganyu,Kaeya,Navia,Noelle,Kamisato Ayato,Xianyun,Sayu,Fischl\n202412,Hydro,Electro,Anemo,Sangonomiya Kokomi,Xingqiu,Raiden Shogun,Kujou Sara,Jean,Lynette,Lyney,Bennett,Zhongli,Collei\n202411,Pyro,Electro,Dendro,Klee,Xinyan,Yae Miko,Dori,Tighnari,Kirara,Xilonen,Chiori,Xingqiu,Layla\n202410,Pyro,Electro,Geo,Dehya,Chevreuse,Keqing,Fischl,Chiori,Ningguang,Kinich,Yelan,Venti,Sucrose\n202409,Pyro,Hydro,Dendro,Dehya,Xiangling,Mualani,Candace,Emilie,Yaoyao,Kaedehara Kazuha,Kachina,Raiden Shogun,Clorinde\n202408,Hydro,Cryo,Anemo,Furina,Barbara,Kamisato Ayaka,Diona,Xiao,Faruzan,Nahida,Emilie,Dehya,Xiangling\n202407,Pyro,Electro,Anemo,Arlecchino,Thoma,Clorinde,Kuki Shinobu,Wanderer,Faruzan,Baizhu,Sigewinne,Alhaitham,Wriothesley", "type": "text"}]